#!/usr/bin/env python3

import argparse
import json
import os
import sys
import subprocess
import getpass
import tempfile
import shlex
from pathlib import Path
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, asdict
from enum import Enum


class ConnectionType(Enum):
    SSH = "ssh"
    MOSH = "mosh"
    TMATE = "tmate"
    

@dataclass
class PortForward:
    local_port: int
    remote_host: str
    remote_port: int
    type: str = "L" # L for local, R for remote, D for dynamic
    

@dataclass
class SSHConfig:
    name: str
    host: str
    user: str
    port: int = 22
    password: Optional[str] = None
    key_file: Optional[str] = None
    connection_type: ConnectionType = ConnectionType.SSH
    port_forwards: List[PortForward] = None
    socket_path: Optional[str] = None
    extra_args: List[str] = None
    description: Optional[str] = None
    
    def __post_init__(self):
        if self.port_forwards is None:
            self.port_forwards = []
        if self.extra_args is None:
            self.extra_args = []
        if isinstance(self.connection_type, str):
            self.connection_type = ConnectionType(self.connection_type)
            
class GPGStorage:
    def __init__(self, config_dir: Path):
        self.config_dir = config_dir
        self.config_file = config_dir / "sshtool.gpg"
        self.config_dir.mkdir(parents=True, exist_ok=True)
        
    def _get_gpg_recipient(self) -> str:
        recipient = os.environ.get('SSHTOOL_GPG_RECIPIENT')
        if recipient:
            return recipient
        
        try:
            result = subprocess.run(['gpg', '--list-secret-keys', '--with-colons'],
                                    capture_output=True, text=True, check=True)
            for line in result.stdout.split('\n'):
                if line.startswith('sec:'):
                    parts = line.split(':')
                    if len(parts) > 4:
                        return parts[4][-8:]
        except subprocess.CalledProcessError:
            pass
        
        recipient = input("Enter GPG recipient ID (email or key ID): ").strip()
        if not recipient:
            raise ValueError("GPG recipient is required")
        return recipient
    
    def encrypt_data(self, data: str) -> bool:
        try:
            recipient = self._get_gpg_recipient()
            with tempfile.NamedTemporaryFile(mode='w', delete=False) as tmp:
                tmp.write(data)
                tmp_path = tmp.name
            
            result = subprocess.run([
                'gpg', '--yes', '--trust-model', 'always', '--encrypt',
                '--recipient', recipient, '--output', str(self.config_file),
                tmp_path
            ], capture_output=True, text=True)
            
            os.unlink(tmp_path)
            return result.returncode == 0
        except Exception as e:
            print(f"Error encrypting data: {e}", file=sys.stderr)
            return False
        
    def decrypt_data(self) -> Optional[str]:
        if not self.config_file.exists():
            return None
        
        try:
            result = subprocess.run([
                'gpg', '--quiet', '--decrypt', str(self.config_file)
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                return result.stdout
            else:
                print(f"Error decrypting data: {result.stderr}", file=sys.stderr)
                return None
        except Exception as e:
            print(f"Error decrypting data: {e}", file=sys.stderr)
            return None
        
class SSHToolConfig:
    def __init__(self, config_dir: Optional[Path] = None):
        if config_dir is None:
            config_dir = Path.home() / ".config" / "sshtool"
        self.storage = GPGStorage(config_dir)
        self.configs: Dict[str, SSHConfig] = {}
        self.load_configs()
        
    def load_configs(self):
        data = self.storage.decrypt_data()
        if data:
            try:
                config_data = json.loads(data)
                for name, config_dict in config_data.items():
                    if 'port_forwards' in config_dict:
                        config_dict['port_forwards'] = [
                            PortForward(**pf) for pf in config_dict['port_forwards']
                        ]
                    self.configs[name] = SSHConfig(**config_dict)
            except json.JSONDecodeError as e:
                print(f"Error parsing configuration: {e}", file=sys.stderr)
                
    def save_configs(self):
        config_data = {}
        for name, config in self.configs.items():
            config_dict = asdict(config)
            config_dict['connection_type'] = config_dict['connection_type'].value
            config_data[name] = config_dict
            
        json_data = json.dumps(config_data, indent=2)
        if not self.storage.encrypt_data(json_data):
            print("Failed to save configurations", file=sys.stderr)
            return False
        return True

    def add_config(self, config: SSHConfig):
        self.configs[config.name] = config
        return self.save_configs()
    
    def remove_config(self, name: str) -> bool:
        if name in self.configs:
            del self.configs[name]
            return self.save_configs()
        return False
    
    def get_config(self, name: str) -> Optional[SSHConfig]:
        return self.configs.get(name)
    
    def list_configs(self) -> List[str]:
        return list(self.configs.keys())
    
class SSHConnection:
    @staticmethod
    def build_ssh_command(config: SSHConfig) -> List[str]:
        cmd = ['ssh']
        
        if config.port != 22:
            cmd.extend(['-p', str(config.port)])
            
        if config.key_file:
            cmd.extend(['-i', config.key_file])
            
        for pf in config.port_forwards:
            if pf.type == 'L':
                cmd.extend(['-L', f"{pf.local_port}:{pf.remote_host}:{pf.remote_port}"])
            elif pf.type == 'R':
                cmd.extend(['-R', f"{pf.local_port}:{pf.remote_host}:{pf.remote_port}"])
            elif pf.type == 'D':
                cmd.extend(['-D', str(pf.local_port)])
                
        if config.socket_path:
            cmd.extend(['-S', config.socket_path])
            
        cmd.extend(config.extra_args)
        
        cmd.append(f"{config.user}@{config.host}")
        
        return cmd
    
    @staticmethod
    def build_mosh_command(config: SSHConfig) -> List[str]:
        cmd = ['mosh']
        
        if config.port != 22:
            cmd.extend(['--ssh', f"ssh -p {config.port}"])
            
        if config.key_file:
            ssh_args = f"ssh -i {config.key_file}"
            if config.port != 22:
                ssh_args += f" -p {config.port}"
            cmd.extend(['--ssh', ssh_args])
        
        cmd.append(f"{config.user}@{config.host}")
        
        return cmd
    
    @staticmethod
    def build_tmate_command(config: SSHConfig) -> List[str]:
        cmd = ['tmate', '-S', '/tmp/tmate.sock', 'new-session', '-d']
        ssh_cmd = SSHConnection.build_ssh_command(config)
        cmd.extend(ssh_cmd[1:])
        return cmd
    
    @staticmethod
    def connect(config: SSHConfig) -> int:
        if config.connection_type == ConnectionType.SSH:
            cmd = SSHConnection.build_ssh_command(config)
        elif config.connection_type == ConnectionType.MOSH:
            cmd = SSHConnection.build_mosh_command(config)
        elif config.connection_type == ConnectionType.TMATE:
            cmd = SSHConnection.build_tmate_command(config)
        else:
            print(f"Unsupported connection type: {config.connection_type}", file=sys.stderr)
            return 1
        
        print(f"Connecting to {config.name} ({config.user}@{config.host})...")
        print(f"Command: {' '.join(shlex.quote(arg) for arg in cmd)}")
        
        env = os.environ.copy()
        if config.password:
            cmd = ['sshpass', '-p', config.password] + cmd
            
        try:
            return subprocess.run(cmd, env=env).returncode
        except KeyboardInterrupt:
            print("\nConnection interrupted by user")
            return 130
        except FileNotFoundError as e:
            print(f"Command not found: {e}", file=sys.stderr)
            return 127
        
class FZFSelector:
    @staticmethod
    def select_config(configs: Dict[str, SSHConfig]) -> Optional[str]:
        if not configs:
            print("No configurations available", file=sys.stderr)
            return None
        
        items = []
        for name, config in configs.items():
            desc = config.description or ""
            line = f"{name} | {config.user}@{config.host}:{config.port} | {desc}"
            items.append(line)
            
        try:
            proc = subprocess.Popen(
                ['fzf', '--prompt', 'Select SSH config: ', '--height', '40%'],
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            stdout, stderr = proc.communicate('\n'.join(items))
            
            if proc.returncode == 0 and stdout.strip():
                selected_line = stdout.strip()
                config_name = selected_line.split(' | ')[0]
                return config_name
            else:
                return None
            
        except FileNotFoundError:
            print("fzf not found. Please install fzf for interactive selection.", file=sys.stderr)
            return None
        
def create_interactive_config() -> SSHConfig:
    print("Creating new SSH configuration...")
    
    name = input("Configuration name: ").strip()
    if not name:
        raise ValueError("Configuration name is required")
    
    host = input("Host: ").strip()
    if not host:
        raise ValueError("Host is required")
    
    user = input("User: ").strip()
    if not user:
        raise ValueError("User is required")
    
    port_str = input("Port (default 22): ").strip()
    port = int(port_str) if port_str else 22
    
    print("Connection type:")
    print("1. SSH (default)")
    print("2. Mosh")
    print("3. Tmate")
    conn_choice = input("Choice (1-3): ").strip()
    
    connection_type = ConnectionType.SSH
    if conn_choice == '2':
        connection_type = ConnectionType.MOSH
    elif conn_choice == '3':
        connection_type = ConnectionType.TMATE
        
    print("Authentication method:")
    print("1. Key file")
    print("2. Password")
    print("3. Default (SSH agent/default keys)")
    auth_choice = input("Choice (1-3): ").strip()
    
    key_file = None
    password = None
    
    if auth_choice == '1':
        key_file = input("Key file path: ").strip()
        if key_file:
            key_file = os.path.expanduser(key_file)
    elif auth_choice == '2':
        password = getpass.getpass("Password: ")
        
    port_forwards = []
    while True:
        add_forward = input("Add port forward? (y/N)").strip().lower()
        if add_forward != 'y':
            break
        
        print("Forward type:")
        print("L - Local port forward")
        print("R - Remote port forward")
        print("D - Dynamic port forward (SOCKS)")
        forward_type = input("Type (L/R/D): ").strip().upper()
        
        if forward_type not in ['L', 'R', 'D']:
            print("Invalid forward type")
            continue
        
        local_port = int(input("Local port: "))
        
        if forward_type == 'D':
            pf = PortForward(local_port=local_port, remote_host="", remote_port=0, type=forward_type)
        else:
            remote_host = input("Remote host: ").strip()
            remote_port = int(input("Remote port: "))
            pf = PortForward(local_port=local_port, remote_host=remote_host, remote_port=remote_port, type=forward_type)
        
        port_forwards.append(pf)
        
    description = input("Description (optional): ").strip() or None
    
    return SSHConfig(
        name=name,
        host=host,
        user=user,
        port=port,
        password=password,
        key_file=key_file,
        connection_type=connection_type,
        port_forwards=port_forwards,
        description=description
    )
    
def main():
    parser = argparse.ArgumentParser(description="SSH Session Manager with GPG storage")
    parser.add_argument('--choose', '-c', action='store_true', help='Interactive selection with fzf')
    parser.add_argument('--add', '-a', action='store_true', help='Add new configuration')
    parser.add_argument('--remove', '-r', metavar='NAME', help='Remove configuration')
    parser.add_argument('--list', '-l', action='store_true', help='List all configurations')
    parser.add_argument('--edit', '-e', metavar='NAME', help='Edit configuration')
    parser.add_argument('--connect', metavar='NAME', help='Connect to specified configuration')
    parser.add_argument('--config-dir', metavar='DIR', help='Configuration directory')
    parser.add_argument('config_name', nargs='?', help='Configuration name to connect to')
    
    args = parser.parse_args()
    
    config_dir = Path(args.config_dir) if args.config_dir else None
    ssh_config = SSHToolConfig(config_dir)
    
    try:
        if args.add:
            config = create_interactive_config()
            if ssh_config.add_config(config):
                print(f"Configuration '{config.name}' added successfully")
            else:
                print("Failed to add configuration", file=sys.stderr)
                return 1
            
        elif args.remove:
            if ssh_config.remove_config(args.remove):
                print(f"Configuration '{args.remove}' removed successfully")
            else:
                print(f"Configuration '{args.remove}' not found", file=sys.stderr)
                return 1
            
        elif args.list:
            configs = ssh_config.list_configs()
            if configs:
                print("Available configurations:")
                for name in sorted(configs):
                    config = ssh_config.get_config(name)
                    desc = f" - {config.description}" if config.description else ""
                    print(f"  {name} ({config.user}@{config.host}:{config.port}){desc}")
            else:
                print("No configurations found")
                    
        elif args.choose:
            selected = FZFSelector.select_config(ssh_config.configs)
            if selected:
                config = ssh_config.get_config(selected)
                return SSHConnection.connect(config)
            else:
                print("No configuration selected")
                return 1
        
        elif args.connect:
            config = ssh_config.get_config(args.connect)
            if config:
                return SSHConnection.connect(config)
            else:
                print(f"Configuration '{args.connect}' not found", file=sys.stderr)
                return 1
            
        elif args.config_name:
            config = ssh_config.get_config(args.config_name)
            if config:
                return SSHConnection.connect(config)
            else:
                print(f"Configuration '{args.config_name}' not found", file=sys.stderr)
                return 1
            
        else:
            selected = FZFSelector.select_config(ssh_config.configs)
            if selected:
                config = ssh_config.get_config(selected)
                return SSHConnection.connect(config)
            else:
                parser.print_help()
                return 1
            
    except KeyboardInterrupt:
        print("\nOperation cancelled by user")
        return 130
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())